[{"path":"https://josesamos.github.io/clc/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 clc authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"CORINE Land Cover Data and Styles","text":"section introduces CORINE Land Cover. also presents clc package, highlighting functionalities. Finally, document’s structure outlined.","code":""},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"corine-land-cover","dir":"Articles","previous_headings":"Introduction","what":"CORINE Land Cover","title":"CORINE Land Cover Data and Styles","text":"CORINE Land Cover (CLC) standardized geospatial dataset provides detailed land cover land use information across Europe. Established European Commission’s CORINE (Coordination Information Environment) program, CLC offers consistent comparable land cover data environmental monitoring spatial planning. CLC aligns INSPIRE Directive (Infrastructure Spatial Information European Community), establishes framework spatial data interoperability across Europe. CLC datasets conform INSPIRE’s standards land cover data, ensuring compatibility datasets supporting European environmental planning initiatives. CLC available vector raster formats: Vector Format: Represents land cover polygons, categorized using predefined CLC codes. format typically includes associated style definition (e.g., QML SLD) ensures consistent visualization land cover classes across platforms. Raster Format: Provides land cover data gridded format cell values corresponding CLC codes. CLC code associated specific color description part classification system. Style files (e.g., QGIS QML SLD files) often included CLC datasets, enabling standardized visualization land cover classes accurate intuitive map representation. GeoPackage PostGIS formats, styles stored dedicated table, contains metadata associated layer.","code":""},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"the-clc-package","dir":"Articles","previous_headings":"Introduction","what":"The clc package","title":"CORINE Land Cover Data and Styles","text":"goal clc package support operations CLC data, addressing challenges specificities presents, particularly related associated styles. main characteristics following: automates extraction, application, preservation styles across workflows. Tasks reading CLC vector data, applying styles, clipping layers, converting vector data raster format involve multiple steps. clc package provides simplified, high-level functions handle tasks efficiently. handles CLC data GeoPackage PostGIS formats, supporting sources destinations. clc package includes clc class, designed comprehensive toolkit managing processing CLC data, enabling users perform wide range geospatial operations efficiently.","code":""},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"document-structure","dir":"Articles","previous_headings":"Introduction","what":"Document Structure","title":"CORINE Land Cover Data and Styles","text":"Apart introduction, document begins presenting data available within package. demonstrates functionalities clc class complete usage example. Finally, concludes summary functionalities benefits.","code":""},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"data-included-in-the-package","dir":"Articles","previous_headings":"","what":"Data Included in the Package","title":"CORINE Land Cover Data and Styles","text":"package includes following datasets support workflows CLC data: clc: fragment CLC data region Granada, Spain, stored vector format. layer includes associated style definitions, stored within GeoPackage. data sourced CNIG (Centro Nacional de Información Geográfica). lanjaron: polygonal vector layer representing boundaries municipality Lanjarón, located Granada, Spain. data sourced DERA (Datos Espaciales de Referencia de Andalucía). mdt.tif, raster file containing Digital Terrain Model (DTM) region clc lanjaron layers. data also obtained CNIG. DTM data actually used; format needed template create base raster. datasets provide foundational base exploring functionalities package, including vector raster data processing visualization.","code":""},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"class-based-operations","dir":"Articles","previous_headings":"","what":"Class-Based Operations","title":"CORINE Land Cover Data and Styles","text":"Key features clc class include ability read CLC datasets directly widely used geospatial databases, GeoPackage PostGIS. class also facilitates advanced visualization CLC vector data, complete associated styles, accurately represent land cover classifications. Users can refine datasets clipping CLC data specific regions interest preserving style consistency, enabling localized analyses. addition vector processing, clc class supports conversion CLC vector data raster formats, expanding utility raster-based analyses. rasterized, users can visualize CLC raster data styles mirror original vector representation, maintaining interpretability. support data sharing processing, clc class includes functionality exporting CLC data associated styles back GeoPackage PostGIS, ensuring data integrity compatibility external systems. following provides detailed example illustrating functionalities described earlier.","code":""},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"create-an-object-of-class-clc","dir":"Articles","previous_headings":"Class-Based Operations","what":"Create an object of class clc","title":"CORINE Land Cover Data and Styles","text":"start showing create object class clc vector layer. source parameter specifies source vector data, can path GeoPackage file DBI connection PostGIS database. layer_name parameter name specific layer source used. create clc object, vector layer must associated styles source. styles essential define visual appearance CLC data, including category colors labels. can include parameter called field, optional. provided function unable automatically determine field containing CLC codes layer. can happen multiple fields none . field set NULL (default), function attempt locate appropriate column contains CLC codes based layer’s structure. function returns object class clc, can used analysis visualization. case, following code achieve result, assuming database contains layer styles stored. example demonstrates use PostGIS database connection instead GeoPackage file. However, since example designed run within package without external dependencies like live database, use local clc.gpkg file instead.","code":"library(clc)  source_gpkg <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\")  clc_data <- clc(source = source_gpkg, layer_name = \"clc\") library(clc)  conn <- RPostgres::dbConnect(   RPostgres::Postgres(),   dbname = 'exampledb',   host = 'localhost',   port = '5432',   user = 'user',   password = 'password' )  clc_data <- clc(source = conn, layer_name = \"clc\")  DBI::dbDisconnect(conn)"},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"plot-of-vector-clc-data","dir":"Articles","previous_headings":"Class-Based Operations","what":"Plot of Vector CLC Data","title":"CORINE Land Cover Data and Styles","text":"object created associated style, next step visualize data applied style. achieved using following function:  command automatically considers style previously associated clc object. ensures vector data displayed appropriate colors descriptions, defined source, without need styling adjustments. vector plot CLC data created using ggplot2::ggplot function. function defined using functions ggplot2 package ensure plot displayed appropriate styling formatting. However, instead directly using plot_clc, prepare_plot function included package define basic elements plot. function prepares necessary components visualization, leaves final presentation customization user. complete plot configuration, missing elements, color labels, can obtained using get_levels function. elements can used define presentation according user’s preferences. example, following code achieves result plot_clc, provides flexibility customization:  code customizes plot defining color scale, adding labels, modifying appearance legend. allows full control data presented, beyond default configuration provided plot_clc.","code":"clc_data |>    plot_clc() p <- clc_data |>   prepare_plot()  levels <- clc_data |>   get_levels()  p <- p +   ggplot2::scale_fill_manual(     values = stats::setNames(levels$color, levels$id),     labels = stats::setNames(levels$description, levels$id),     name = \"\"   ) +   ggplot2::theme(     legend.position = \"right\",     legend.key.height = ggplot2::unit(2, \"cm\"),     legend.title = ggplot2::element_text(size = 12),     legend.text = ggplot2::element_text(size = 10)   ) +   ggplot2::theme_minimal()  p"},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"clipping-clc-data-to-a-region-of-interest","dir":"Articles","previous_headings":"Class-Based Operations","what":"Clipping CLC Data to a Region of Interest","title":"CORINE Land Cover Data and Styles","text":"section, focus process clipping CLC data region interest, using provided cut_to_extent function. function essential tool isolating specific areas within CLC data, allowing users work smaller, relevant subsets data. First, read clipping layer (region interest) source GeoPackage, defines geographical boundaries clip. loading region, use cut_to_extent function clip CLC data region. data clipped, visualized using plot_clc function, applies appropriate styling provides clear representation clipped CLC data. ’s example clip CLC data region visualize result:  workflow demonstrates cut_to_extent function can used subset CLC data specific region visualize clipped data, retaining correct styling.","code":"# Read the clipping layer (region of interest) region <- sf::st_read(source_gpkg, layer = \"lanjaron\", quiet = TRUE)  # Clip the CLC data to the region of interest clc_clipped <- clc_data |>    cut_to_extent(region)  # Visualize the clipped CLC data with its associated style clc_clipped |>    plot_clc()"},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"saving-clc-data-and-styles","dir":"Articles","previous_headings":"Class-Based Operations","what":"Saving CLC Data and Styles","title":"CORINE Land Cover Data and Styles","text":"section, focus save CLC data, along associated styles, GeoPackage. process ensures data preserved standard format future use, correct styling embedded file. example, clipping CLC data, may want store resulting subset along style information GeoPackage file (new existing one). save_to function used write CLC data styles specified GeoPackage destination. following example demonstrates save clipped CLC data styles new GeoPackage: workflow saves clipped CLC data new GeoPackage file, ensuring data associated styles properly stored. can later access file, preserving full context original dataset, including applied styles. addition saving clipped data GeoPackage, can also save PostGIS database. following example demonstrates . However, example executed avoid creating external dependencies database connection. save_to function can used PostGIS connection, just like GeoPackage, enabling flexibility data stored.","code":"# Define the output GeoPackage file output_gpkg <- tempfile(fileext = \".gpkg\")  # Capture output to suppress messages (optional) sink(tempfile())  # Save the clipped data and its styles to the new GeoPackage clc_clipped |>    save_to(output_gpkg)  # Stop capturing output sink() conn <- RPostgres::dbConnect(   RPostgres::Postgres(),   dbname = 'exampledb2',   host = 'localhost',   port = '5432',   user = 'user',   password = 'password' )  clc_clipped |>    save_to(conn, 'exampledb2')  DBI::dbDisconnect(conn)"},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"copying-styles","dir":"Articles","previous_headings":"Class-Based Operations","what":"Copying Styles","title":"CORINE Land Cover Data and Styles","text":"copy_to function clc package enables copy style definitions one source apply specified layer layers destination. specific layer indicated, style applied layers destination. example demonstrating use copy_to:  workflow demonstrates flexibility clc package managing styles across multiple GeoPackages. copy_to function can also used PostGIS database destination.","code":"# Create a new GeoPackage without style definition destination_gpkg <- tempfile(fileext = \".gpkg\") clc_layer <- sf::st_read(source_gpkg, layer = \"clc\", quiet = TRUE) sf::st_write(   clc_layer,   destination_gpkg,   layer = \"clc2\",   delete_layer = TRUE,   quiet = TRUE )  # Copy the style to the new GeoPackage clc_clipped |>   copy_to(to = destination_gpkg, layers = \"clc2\")  # Create a clc object from the new GeoPackage and view it clc_data2 <- clc(source = destination_gpkg, layer_name = \"clc2\")  clc_data2 |>   plot_clc()"},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"converting-clc-data-to-raster-format","dir":"Articles","previous_headings":"Class-Based Operations","what":"Converting CLC Data to Raster Format","title":"CORINE Land Cover Data and Styles","text":"as_raster function clc package provides efficient way convert vector-based CLC data raster format. particularly useful working raster-based analysis workflows function allows specifying base raster consistent alignment resolution existing raster data. base raster provided, custom resolution can specified generate raster grid. raster output retains CLC categories, ensuring data remains consistent original classification. two examples demonstrating use as_raster: base raster available, can use define extent, resolution, coordinate reference system (CRS) output raster. base raster available, can specify resolution define raster grid. examples demonstrate as_raster streamlines conversion process, making easier integrate vector-based CLC data raster workflows.","code":"raster_path <- system.file(\"extdata\", \"mdt.tif\", package = \"clc\") base_raster <- terra::rast(raster_path)  clc_raster1 <- clc_clipped |>    as_raster(base_raster = base_raster) clc_raster2 <- clc_clipped |>    as_raster(resolution = 50)"},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"applications-of-the-generated-raster","dir":"Articles","previous_headings":"Class-Based Operations","what":"Applications of the Generated Raster","title":"CORINE Land Cover Data and Styles","text":"converting CLC data raster format using as_raster function, raster can used various applications. , demonstrate two common use cases. examples illustrate versatility raster output, making suitable visualization, sharing, extended GIS workflows.","code":""},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"visualizing-the-raster-data","dir":"Articles","previous_headings":"Class-Based Operations > Applications of the Generated Raster","what":"Visualizing the Raster Data","title":"CORINE Land Cover Data and Styles","text":"raster visualization, terra::plot function used color scheme configured (using col parameter) match CLC styles. plot_clc function allows customization parameters supported terra::plot.  renders raster using colors descriptions associated original CLC styles, ensuring clear accurate representation data.","code":"clc_raster1 |>    plot_clc()"},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"getting-the-raster","dir":"Articles","previous_headings":"Class-Based Operations > Applications of the Generated Raster","what":"Getting the Raster","title":"CORINE Land Cover Data and Styles","text":"get_raster function extracts terra::SpatRaster object customization, analysis, storage. raster obtained, can exported file format GeoTIFF. particularly useful sharing data processing GIS software. workflow creates GeoTIFF file containing rasterized CLC data, making compatible GIS platforms software.","code":"clc_r <- clc_raster1 |>   get_raster()  output_tif <- tempfile(fileext = \".tif\") terra::writeRaster(clc_r,                    output_tif,                    filetype = \"GTiff\",                    overwrite = TRUE)"},{"path":"https://josesamos.github.io/clc/articles/clc.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"CORINE Land Cover Data and Styles","text":"clc package provides efficient user-friendly framework managing processing CLC data. automating key operations style handling, clipping, rasterization, data export, simplifies workflows enhances interoperability geospatial formats like GeoPackage PostGIS. flexible well-documented functionality, package addresses complexities associated CLC data, ensuring accurate visualization seamless integration GIS workflows. detailed examples workflows presented demonstrate potential streamline CLC data management, making valuable tool environmental analysis, spatial planning, research applications.","code":""},{"path":"https://josesamos.github.io/clc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jose Samos. Author, maintainer. Universidad de Granada. Copyright holder.","code":""},{"path":"https://josesamos.github.io/clc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Samos J (2024). clc: CORINE Land Cover Data Styles. R package version 1.0.0, https://github.com/josesamos/clc, https://josesamos.github.io/clc/.","code":"@Manual{,   title = {clc: CORINE Land Cover Data and Styles},   author = {Jose Samos},   year = {2024},   note = {R package version 1.0.0, https://github.com/josesamos/clc},   url = {https://josesamos.github.io/clc/}, }"},{"path":"https://josesamos.github.io/clc/index.html","id":"clc-","dir":"","previous_headings":"","what":"CORINE Land Cover Data and Styles","title":"CORINE Land Cover Data and Styles","text":"CORINE Land Cover (CLC) European land use land cover classification system provides standardized geospatial data land cover categories. includes associated style definition, typically stored formats like GeoPackage, links land cover codes descriptive labels visualization attributes (e.g., colors) consistent representation across GIS platforms. clc package simplifies workflows common tasks, reading CLC vector file, visualizing style, clipping data region, saving output style, converting raster format, supporting CLC data GeoPackage PostGIS sources destinations.","code":""},{"path":"https://josesamos.github.io/clc/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"CORINE Land Cover Data and Styles","text":"can install released version clc CRAN : development version GitHub :","code":"install.packages(\"clc\") # install.packages(\"pak\") pak::pak(\"josesamos/clc\")"},{"path":"https://josesamos.github.io/clc/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"CORINE Land Cover Data and Styles","text":"basic example shows solve common problem. Read CLC data GeoPackage visualize CLC data styles.  Read clipping layer (region interest), clip CLC data region interest visualize clipped CLC data styles.  Convert clipped CLC data raster format visualize styles.  Save clipped data styles new GeoPackage. Get raster terra::SpatRaster format store file, example.","code":"library(clc)  source_gpkg <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\")  clc_data <- clc(source = source_gpkg, layer_name = \"clc\")  clc_data |>    plot_clc() region <- sf::st_read(source_gpkg, layer = \"lanjaron\", quiet = TRUE)  clc_clipped <- clc_data |>    cut_to_extent(region)  clc_clipped |>    plot_clc() raster_path <- system.file(\"extdata\", \"mdt.tif\", package = \"clc\")  base_raster <- terra::rast(raster_path)  clc_raster <- clc_clipped |>    as_raster(base_raster = base_raster)  clc_raster |>    plot_clc() output_gpkg <- tempfile(fileext = \".gpkg\")  sink(tempfile())  clc_clipped |>    save_to(output_gpkg)  sink() clc_r <- clc_raster |>   get_raster()  output_tif <- tempfile(fileext = \".tif\")  terra::writeRaster(clc_r,                    output_tif,                    filetype = \"GTiff\",                    overwrite = TRUE)"},{"path":"https://josesamos.github.io/clc/reference/as_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a `clc` Object to Raster Format — as_raster","title":"Convert a `clc` Object to Raster Format — as_raster","text":"Returns object class `clc_raster` contains `terra::SpatRaster` raster object representing converted vector layer raster format.","code":""},{"path":"https://josesamos.github.io/clc/reference/as_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a `clc` Object to Raster Format — as_raster","text":"","code":"as_raster(clo, base_raster, resolution)  # S3 method for class 'clc' as_raster(clo, base_raster = NULL, resolution = NULL)"},{"path":"https://josesamos.github.io/clc/reference/as_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a `clc` Object to Raster Format — as_raster","text":"clo `clc` object. base_raster (Optional) raster object use base rasterization. resolution (Optional) Numeric resolution define raster grid.","code":""},{"path":"https://josesamos.github.io/clc/reference/as_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a `clc` Object to Raster Format — as_raster","text":"object class `clc_raster`.","code":""},{"path":"https://josesamos.github.io/clc/reference/as_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a `clc` Object to Raster Format — as_raster","text":"function requires either `base_raster` `resolution` provided. missing, error raised.","code":""},{"path":[]},{"path":"https://josesamos.github.io/clc/reference/as_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a `clc` Object to Raster Format — as_raster","text":"","code":"source_gpkg <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\") clo <- clc(source = source_gpkg, layer_name = \"clc\")  raster_path <- system.file(\"extdata\", \"mdt.tif\", package = \"clc\") base_raster <- terra::rast(raster_path)  # ex1 r <- clo |>      as_raster(base_raster = base_raster)  # ex2 r <- clo |>      as_raster(resolution = 50)"},{"path":"https://josesamos.github.io/clc/reference/clc.html","id":null,"dir":"Reference","previous_headings":"","what":"`clc` S3 Class — clc","title":"`clc` S3 Class — clc","text":"Create object class `clc`.","code":""},{"path":"https://josesamos.github.io/clc/reference/clc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"`clc` S3 Class — clc","text":"","code":"clc(source, layer_name, field = NULL)"},{"path":"https://josesamos.github.io/clc/reference/clc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"`clc` S3 Class — clc","text":"source source vector layer. can : - string representing path GeoPackage file. - `DBI` database connection object PostGIS database, created using [RPostgres::dbConnect()]. layer_name name layer source used. field (Optional) string, layer field contains CLC codes. NULL, function attempt locate column containing CLC codes.","code":""},{"path":"https://josesamos.github.io/clc/reference/clc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"`clc` S3 Class — clc","text":"object class `clc`.","code":""},{"path":"https://josesamos.github.io/clc/reference/clc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"`clc` S3 Class — clc","text":"function creates object class `clc` vector layer either GeoPackage PostGIS database. layer must style defined source.","code":""},{"path":[]},{"path":"https://josesamos.github.io/clc/reference/clc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"`clc` S3 Class — clc","text":"","code":"# ex1 source_gpkg <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\") clo <- clc(source = source_gpkg, layer_name = \"clc\")  if (FALSE) { # \\dontrun{ # ex2 conn <- RPostgres::dbConnect(   RPostgres::Postgres(),   dbname = 'exampledb',   host = 'localhost',   port = '5432',   user = 'user',   password = 'password' ) clo <- clc(source = conn, layer_name = \"clc\") } # }"},{"path":"https://josesamos.github.io/clc/reference/clc_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"CLC Codes — clc_codes","title":"CLC Codes — clc_codes","text":"code represents specific category detailed level (Level 3) CLC system.","code":""},{"path":"https://josesamos.github.io/clc/reference/clc_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CLC Codes — clc_codes","text":"","code":"clc_codes"},{"path":"https://josesamos.github.io/clc/reference/clc_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CLC Codes — clc_codes","text":"vector strings.","code":""},{"path":"https://josesamos.github.io/clc/reference/copy_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy a Style to a GeoPackage or PostGIS Database — copy_to","title":"Copy a Style to a GeoPackage or PostGIS Database — copy_to","text":"function copies style specified layers GeoPackage file PostGIS database. destination determined `` argument.","code":""},{"path":"https://josesamos.github.io/clc/reference/copy_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy a Style to a GeoPackage or PostGIS Database — copy_to","text":"","code":"copy_to(clo, to, database, schema, layers)  # S3 method for class 'clc' copy_to(clo, to, database = NULL, schema = \"public\", layers = NULL)"},{"path":"https://josesamos.github.io/clc/reference/copy_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy a Style to a GeoPackage or PostGIS Database — copy_to","text":"clo `clc` object. data destination output. can : - string representing path GeoPackage file. - `DBI` database connection object PostGIS database, created using [RPostgres::dbConnect()]. database string, database name, case destination PostGIS. schema string, schema name, case destination PostGIS. Defaults `'public'`. layers optional character vector specifying names layers destination styles applied. `NULL` (default), applies style layers.","code":""},{"path":"https://josesamos.github.io/clc/reference/copy_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy a Style to a GeoPackage or PostGIS Database — copy_to","text":"clo `clc` object.","code":""},{"path":[]},{"path":"https://josesamos.github.io/clc/reference/copy_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy a Style to a GeoPackage or PostGIS Database — copy_to","text":"","code":"source_gpkg <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\") clo <- clc(source = source_gpkg, layer_name = \"clc\")  out_gpkg <- tempfile(fileext = \".gpkg\") clo <- clo |>   save_to(out_gpkg) #> Writing layer `clc' to data source  #>   `/tmp/RtmpsPWxXo/file1a0cf28f55e.gpkg' using driver `GPKG' #> Writing 136 features with 2 fields and geometry type Multi Polygon.  # ex1 clo <- clo |>   copy_to(out_gpkg, layers = 'clc')  if (FALSE) { # \\dontrun{ conn <- RPostgres::dbConnect(   RPostgres::Postgres(),   dbname = 'exampledb',   host = 'localhost',   port = '5432',   user = 'user',   password = 'password' ) clo <- clo |>   save_to(conn, 'exampledb')  # ex2 clo <- clo |>   copy_to(conn, 'exampledb', layers = 'clc') } # }"},{"path":"https://josesamos.github.io/clc/reference/cut_to_extent.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip the Layer with a Polygon — cut_to_extent","title":"Clip the Layer with a Polygon — cut_to_extent","text":"function clips object layer using polygon layer. handles CRS transformations automatically necessary, ensuring output CRS input polygon.","code":""},{"path":"https://josesamos.github.io/clc/reference/cut_to_extent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip the Layer with a Polygon — cut_to_extent","text":"","code":"cut_to_extent(clo, polygon)  # S3 method for class 'clc' cut_to_extent(clo, polygon)"},{"path":"https://josesamos.github.io/clc/reference/cut_to_extent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip the Layer with a Polygon — cut_to_extent","text":"clo `clc` object. polygon `sf` object representing polygon layer used clipping.","code":""},{"path":"https://josesamos.github.io/clc/reference/cut_to_extent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clip the Layer with a Polygon — cut_to_extent","text":"`clc` object.","code":""},{"path":[]},{"path":"https://josesamos.github.io/clc/reference/cut_to_extent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clip the Layer with a Polygon — cut_to_extent","text":"","code":"source_gpkg <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\") clo <- clc(source = source_gpkg, layer_name = \"clc\")  polygon <- sf::st_read(source_gpkg, layer = 'lanjaron', quiet = TRUE)  clo2 <- clo |>         cut_to_extent(polygon)"},{"path":"https://josesamos.github.io/clc/reference/get_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Colors from a CLC Style Definition — get_colors.clc","title":"Retrieve Colors from a CLC Style Definition — get_colors.clc","text":"function extracts color values associated CLC style definition. returns character vector containing `color` field CLC style definition.","code":""},{"path":"https://josesamos.github.io/clc/reference/get_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Colors from a CLC Style Definition — get_colors.clc","text":"","code":"# S3 method for class 'clc' get_colors(clo)  get_colors(clo)  # S3 method for class 'clc_category' get_colors(clo)  # S3 method for class 'clc_raster' get_colors(clo)"},{"path":"https://josesamos.github.io/clc/reference/get_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Colors from a CLC Style Definition — get_colors.clc","text":"clo `clc_category` object.","code":""},{"path":"https://josesamos.github.io/clc/reference/get_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Colors from a CLC Style Definition — get_colors.clc","text":"character vector colors.","code":""},{"path":[]},{"path":"https://josesamos.github.io/clc/reference/get_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Colors from a CLC Style Definition — get_colors.clc","text":"","code":"source_gpkg <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\") clo <- clc(source = source_gpkg, layer_name = \"clc\")  levels <- clo |>   get_colors()"},{"path":"https://josesamos.github.io/clc/reference/get_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Levels from a CLC Style Definition — get_levels.clc","title":"Retrieve Levels from a CLC Style Definition — get_levels.clc","text":"function extracts levels values associated CLC style definition. returns data frame contains fields `id`, `description`, `color` CLC style definition.","code":""},{"path":"https://josesamos.github.io/clc/reference/get_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Levels from a CLC Style Definition — get_levels.clc","text":"","code":"# S3 method for class 'clc' get_levels(clo)  get_levels(clo)  # S3 method for class 'clc_category' get_levels(clo)  # S3 method for class 'clc_raster' get_levels(clo)"},{"path":"https://josesamos.github.io/clc/reference/get_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Levels from a CLC Style Definition — get_levels.clc","text":"clo CLC object.","code":""},{"path":"https://josesamos.github.io/clc/reference/get_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Levels from a CLC Style Definition — get_levels.clc","text":"data frame columns:   - `id`: identifier category.   - `description`: textual description category.   - `color`: color associated category.","code":""},{"path":[]},{"path":"https://josesamos.github.io/clc/reference/get_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Levels from a CLC Style Definition — get_levels.clc","text":"","code":"source_gpkg <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\") clo <- clc(source = source_gpkg, layer_name = \"clc\")  levels <- clo |>   get_levels()"},{"path":"https://josesamos.github.io/clc/reference/get_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a Raster Representation of CLC — get_raster","title":"Retrieve a Raster Representation of CLC — get_raster","text":"Retrieve raster representation (`terra::SpatRaster`) CLC object.","code":""},{"path":"https://josesamos.github.io/clc/reference/get_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a Raster Representation of CLC — get_raster","text":"","code":"get_raster(clo)  # S3 method for class 'clc_raster' get_raster(clo)"},{"path":"https://josesamos.github.io/clc/reference/get_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a Raster Representation of CLC — get_raster","text":"clo `clc_raster` object.","code":""},{"path":"https://josesamos.github.io/clc/reference/get_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a Raster Representation of CLC — get_raster","text":"`terra::SpatRaster` object.","code":""},{"path":[]},{"path":"https://josesamos.github.io/clc/reference/get_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a Raster Representation of CLC — get_raster","text":"","code":"source_gpkg <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\") clo <- clc(source = source_gpkg, layer_name = \"clc\")  r <- clo |>      as_raster(resolution = 50)  clc_r <- r |>          get_raster()"},{"path":"https://josesamos.github.io/clc/reference/plot_clc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot CLC Layer — plot_clc","title":"Plot CLC Layer — plot_clc","text":"Plot CLC data stored objects supported classes. function adapts plot based class input data (vectorial raster format).","code":""},{"path":"https://josesamos.github.io/clc/reference/plot_clc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot CLC Layer — plot_clc","text":"","code":"plot_clc(clo, ...)  # S3 method for class 'clc' plot_clc(clo, ...)  # S3 method for class 'clc_raster' plot_clc(clo, ...)"},{"path":"https://josesamos.github.io/clc/reference/plot_clc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot CLC Layer — plot_clc","text":"clo object containing CLC data. must instance supported class, : - vectorial CLC data object (e.g., `clc` object). - raster CLC data object (e.g., `clc_raster`). ... Additional arguments passed `terra::plot` function.","code":""},{"path":"https://josesamos.github.io/clc/reference/plot_clc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot CLC Layer — plot_clc","text":"`ggplot2` object `terra` plot.","code":""},{"path":"https://josesamos.github.io/clc/reference/plot_clc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot CLC Layer — plot_clc","text":"raster version, `terra::plot` function used `col` parameter configured, parameters supported function can also defined (using `...`). vector version, `ggplot2::ggplot` used, using `prepare_plot` function instead one (`plot_clc`), customization can applied needed.","code":""},{"path":[]},{"path":"https://josesamos.github.io/clc/reference/plot_clc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot CLC Layer — plot_clc","text":"","code":"source_gpkg <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\") clo <- clc(source = source_gpkg, layer_name = \"clc\")  temp_file <- tempfile(fileext = \".png\") png(filename = temp_file, width = 800, height = 600)  clo |>   plot_clc()  dev.off() #> pdf  #>   2"},{"path":"https://josesamos.github.io/clc/reference/prepare_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a Plot for CLC Vectorial Data — prepare_plot","title":"Prepare a Plot for CLC Vectorial Data — prepare_plot","text":"Generates `ggplot2` object visualize CLC Vectorial data. function processes data stored `clc` object, ensuring codes field mapped correctly categories associated styles.","code":""},{"path":"https://josesamos.github.io/clc/reference/prepare_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a Plot for CLC Vectorial Data — prepare_plot","text":"","code":"prepare_plot(clo)  # S3 method for class 'clc' prepare_plot(clo)"},{"path":"https://josesamos.github.io/clc/reference/prepare_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a Plot for CLC Vectorial Data — prepare_plot","text":"clo `clc` object.","code":""},{"path":"https://josesamos.github.io/clc/reference/prepare_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a Plot for CLC Vectorial Data — prepare_plot","text":"`ggplot2` object ready rendering.","code":""},{"path":[]},{"path":"https://josesamos.github.io/clc/reference/prepare_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a Plot for CLC Vectorial Data — prepare_plot","text":"","code":"source_gpkg <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\") clo <- clc(source = source_gpkg, layer_name = \"clc\")  p <- clo |>   prepare_plot()  levels <- clo |>   get_levels()  p <- p +   ggplot2::scale_fill_manual(     values = stats::setNames(levels$color, levels$id),     labels = stats::setNames(levels$description, levels$id),     name = \"\"   ) +   ggplot2::theme(     legend.position = \"right\",     legend.key.height = ggplot2::unit(2, \"cm\"),     legend.title = ggplot2::element_text(size = 12),     legend.text = ggplot2::element_text(size = 10)   ) +   ggplot2::theme_minimal()  temp_file <- tempfile(fileext = \".png\") png(filename = temp_file, width = 800, height = 600)  p  dev.off() #> pdf  #>   2"},{"path":"https://josesamos.github.io/clc/reference/safe_clip_multipoligon.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely Clip a Multipolygon Vector Layer — safe_clip_multipoligon","title":"Safely Clip a Multipolygon Vector Layer — safe_clip_multipoligon","text":"function clips `MULTIPOLYGON` vector layer using polygon layer, handling specific issues might arise geometries encoded incorrectly containing unknown WKB types. serves fallback `clip_vector()` function fails due errors like `ParseException: Unknown WKB type 12`, associated *MULTIPOLYGON* types.","code":""},{"path":"https://josesamos.github.io/clc/reference/safe_clip_multipoligon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely Clip a Multipolygon Vector Layer — safe_clip_multipoligon","text":"","code":"safe_clip_multipoligon(vector, polygon)"},{"path":"https://josesamos.github.io/clc/reference/safe_clip_multipoligon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely Clip a Multipolygon Vector Layer — safe_clip_multipoligon","text":"vector `sf` multipolygon vector layer clipped. polygon `sf` polygon layer used clipping geometry.","code":""},{"path":"https://josesamos.github.io/clc/reference/safe_clip_multipoligon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safely Clip a Multipolygon Vector Layer — safe_clip_multipoligon","text":"`sf` vector layer clipped geometries.","code":""},{"path":"https://josesamos.github.io/clc/reference/safe_clip_multipoligon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Safely Clip a Multipolygon Vector Layer — safe_clip_multipoligon","text":"function ensures input layer correctly encoded `MULTIPOLYGON` uses GDAL utilities re-encoding necessary. output projected CRS clipping polygon. solution inspired discussion handling WKB type errors R: <https://gis.stackexchange.com/questions/389814/r-st-centroid-geos-error-unknown-wkb-type-12>.","code":""},{"path":"https://josesamos.github.io/clc/reference/safe_clip_multipoligon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safely Clip a Multipolygon Vector Layer — safe_clip_multipoligon","text":"","code":"gpkg_path <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\")  clc <- sf::st_read(gpkg_path, layer = \"clc\") #> Reading layer `clc' from data source  #>   `/home/runner/work/_temp/Library/clc/extdata/clc.gpkg' using driver `GPKG' #> Simple feature collection with 136 features and 2 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 453250.3 ymin: 4081013 xmax: 465080 ymax: 4099648 #> Projected CRS: ETRS89 / UTM zone 30N lanjaron <- sf::st_read(gpkg_path, layer = \"lanjaron\") #> Reading layer `lanjaron' from data source  #>   `/home/runner/work/_temp/Library/clc/extdata/clc.gpkg' using driver `GPKG' #> Simple feature collection with 1 feature and 4 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 453250.3 ymin: 4081013 xmax: 465080 ymax: 4099648 #> Projected CRS: ETRS89 / UTM zone 30N  clc_clipped <- safe_clip_multipoligon(clc, lanjaron)"},{"path":"https://josesamos.github.io/clc/reference/save_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a Layer and its Style to a GeoPackage or PostGIS Database — save_to","title":"Save a Layer and its Style to a GeoPackage or PostGIS Database — save_to","text":"function saves layer style GeoPackage file PostGIS database. destination determined `` argument.","code":""},{"path":"https://josesamos.github.io/clc/reference/save_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a Layer and its Style to a GeoPackage or PostGIS Database — save_to","text":"","code":"save_to(clo, to, database, schema, layer_name)  # S3 method for class 'clc' save_to(clo, to, database = NULL, schema = \"public\", layer_name = NULL)"},{"path":"https://josesamos.github.io/clc/reference/save_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a Layer and its Style to a GeoPackage or PostGIS Database — save_to","text":"clo `clc` object. data destination output. can : - string representing path GeoPackage file. - `DBI` database connection object PostGIS database, created using [RPostgres::dbConnect()]. database string, database name, case destination PostGIS. schema string, schema name, case destination PostGIS. Defaults `'public'`. layer_name character string specifying name layer output. `NULL`, name input `layer` used.","code":""},{"path":"https://josesamos.github.io/clc/reference/save_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a Layer and its Style to a GeoPackage or PostGIS Database — save_to","text":"clo `clc` object.","code":""},{"path":"https://josesamos.github.io/clc/reference/save_to.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save a Layer and its Style to a GeoPackage or PostGIS Database — save_to","text":"function overwrites table already exists.","code":""},{"path":[]},{"path":"https://josesamos.github.io/clc/reference/save_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a Layer and its Style to a GeoPackage or PostGIS Database — save_to","text":"","code":"source_gpkg <- system.file(\"extdata\", \"clc.gpkg\", package = \"clc\") clo <- clc(source = source_gpkg, layer_name = \"clc\")  # ex1 out_gpkg <- tempfile(fileext = \".gpkg\")  sink(tempfile()) clo <- clo |>   save_to(out_gpkg) sink()  if (FALSE) { # \\dontrun{ # ex2 conn <- RPostgres::dbConnect(   RPostgres::Postgres(),   dbname = 'exampledb',   host = 'localhost',   port = '5432',   user = 'user',   password = 'password' ) clo <- clo |>   save_to(conn, 'exampledb') } # }"},{"path":"https://josesamos.github.io/clc/news/index.html","id":"clc-100","dir":"Changelog","previous_headings":"","what":"clc 1.0.0","title":"clc 1.0.0","text":"Initial CRAN submission.","code":""}]
